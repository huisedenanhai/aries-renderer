#version 450 core

#include <GBuffer.glsl>
#include <Misc.glsl>
#include <Transform.glsl>

layout(local_size_x = 32, local_size_y = 32) in;

layout(set = 0,
       binding = 0,
       r11f_g11f_b10f) writeonly uniform image2D output_color_image;

layout(set = 0, binding = 1) uniform sampler2D hiz_buffer;
layout(set = 0, binding = 2) uniform sampler2D src_color_tex;
layout(set = 0, binding = 3) uniform sampler2D gbuffer0_tex;
layout(set = 0, binding = 4) uniform sampler2D gbuffer1_tex;
layout(set = 0, binding = 5) uniform sampler2D gbuffer2_tex;

layout(set = 1, binding = 0) uniform Param {
    mat4 P;
    mat4 I_P;
    int width;
    int height;
    int hiz_mip_count;
};

bool trace_ray_hiz(vec3 origin_ss,
                   vec3 dir_ss,
                   int start_mip_level,
                   out vec3 hit_ss) {
    hit_ss = origin_ss + dir_ss;
    return true;
}

vec3 calculate_color(ivec2 index) {
    vec2 uv = index_to_uv(index, vec2(1.0 / width, 1.0 / height));

    float depth01 = textureLod(hiz_buffer, uv, 0).r;
    if (depth01 == 0) {
        return texture(src_color_tex, uv).rgb;
    }
    GBuffer gbuffer = decode_gbuffer(texture(gbuffer0_tex, uv),
                                     texture(gbuffer1_tex, uv),
                                     texture(gbuffer2_tex, uv),
                                     vec4(0));

    vec3 pos_vs = reconstruct_position_from_ss(I_P, uv, depth01);
    vec3 view_dir_vs = -normalize(pos_vs);
    vec3 reflect_dir_vs = normalize(reflect(-view_dir_vs, gbuffer.normal_vs));

    vec3 offset_pos_ss =
        transform_position_hclip_to_ss(P * vec4(pos_vs + reflect_dir_vs, 1.0));
    vec3 reflect_dir_ss = offset_pos_ss - vec3(uv, depth01);

    vec3 hit_ss;
    trace_ray_hiz(vec3(uv, depth01), reflect_dir_ss, 0, hit_ss);

    return texture(src_color_tex, hit_ss.xy).rgb;
}

void main() {
    ivec2 index = ivec2(gl_GlobalInvocationID.xy);
    if (index.x >= width || index.y >= height) {
        return;
    }

    vec3 color = calculate_color(index);

    imageStore(output_color_image, index, vec4(color, 1.0));
}