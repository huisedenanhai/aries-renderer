#version 450 core

#include "AtmosphereCommon.glsl"

layout(local_size_x = 8, local_size_y = 8) in;

layout(set = 0, binding = 0, r11f_g11f_b10f) uniform image2D output_image;

layout(set = 0, binding = 1) uniform sampler2D transmittance_lut;
layout(set = 0, binding = 2) uniform sampler2D multi_scattering_lut;

layout(set = 1, binding = 0) uniform AtmosphereParam {
    Atmosphere atmosphere;
};

layout(set = 1, binding = 1) uniform Sun {
    AtmosphereSun sun;
};

layout(set = 1, binding = 2) uniform View {
    ViewTransform view;
};

#ifdef SKY_VIEW_BACKGROUND
layout(set = 2, binding = 0) uniform Background {
    vec3 background_factor;
};

layout(set = 2, binding = 1) uniform sampler2D depth_stencil_tex;
#endif

bool calculate_ray_march_range(float r,
                               float mu,
                               out float start_dist,
                               out float end_dist) {
    // The look of sky is undefined when eye sinks in the ground. Just render
    // everything black.
    if (r <= atmosphere.bottom_radius) {
        return false;
    }

    float t0, t1;
    bool hit_top = ray_hit_sphere(atmosphere.top_radius, r, mu, t0, t1);

    // View is at outer space and does not hit atmosphere
    if (!hit_top) {
        return false;
    }

    start_dist = max(0.0, t0);
    end_dist = max(0.0, t1);

    float t;
    bool hit_groud = ray_forward_hit_sphere(atmosphere.bottom_radius, r, mu, t);
    if (hit_groud) {
        end_dist = t;
    }

    return true;
}

vec3 ray_march_sky_view(vec3 view_dir, vec3 view_pos) {
    if (length(sun.direction) == 0) {
        return vec3(0.0);
    }

    float origin_r = length(view_pos);
    float origin_mu = dot(normalize(view_pos), view_dir);

    float start_dist, end_dist;
    bool hit =
        calculate_ray_march_range(origin_r, origin_mu, start_dist, end_dist);

    if (!hit) {
        return vec3(0.0);
    }

    int step_count = 30;
    vec3 L, trans;
    ray_march_scattering_transmittance(atmosphere,
                                       sun,
                                       transmittance_lut,
                                       multi_scattering_lut,
                                       view_dir,
                                       view_pos,
                                       start_dist,
                                       end_dist,
                                       step_count,
                                       L,
                                       trans);

    return L;
}

void main() {
    ivec2 index = ivec2(gl_GlobalInvocationID.xy);
    ivec2 size = imageSize(output_image);
    if (index.x >= size.x || index.y >= size.y) {
        return;
    }

    vec2 uv = index_to_uv(index, 1.0 / size);

#ifdef SKY_VIEW_BACKGROUND
    float depth01 = texture(depth_stencil_tex, uv).r;
    // Only work with background
    if (depth01 != 0.0) {
        return;
    }

    ShadingPoint sp = get_shading_point(view, uv, depth01);
    vec3 dir = -sp.v_ws;
#else
    vec3 dir = sky_view_lut_uv_to_direction(uv);
#endif

    vec3 color = ray_march_sky_view(
        dir, get_view_position_planet_coord(atmosphere, view));

#ifdef SKY_VIEW_BACKGROUND
    color *= background_factor;
#endif

    imageStore(output_image, index, vec4(color, 1.0));
}
