#version 450 core

#include "SSRCommon.glsl"
#include <GBuffer.glsl>
#include <MetallicRoughnessPBR.glsl>
#include <Misc.glsl>
#include <Sampling.glsl>
#include <ShadingModel.glsl>
#include <Transform.glsl>

layout(local_size_x = 32, local_size_y = 32) in;

layout(set = 0, binding = 0, rgba16f) writeonly uniform image2D hit_buffer;

layout(set = 0, binding = 1) uniform sampler2D hiz_buffer;
layout(set = 0, binding = 2) uniform sampler2D gbuffer1_tex;
layout(set = 0, binding = 3) uniform sampler2D gbuffer2_tex;

layout(set = 1, binding = 0) uniform Param {
    int hiz_mip_count;
    int frame_index;
    float unbiased_sampling;
};

layout(set = 1, binding = 1) uniform View {
    ViewTransform view;
};

// Select a border and offset it.
// The border selection assumes the ray origin is inside the grid.
vec2 offset_grid_border(vec3 dir, vec2 grid_size, vec2 border_offset) {
    float bx = dir.x > 0 ? grid_size.x : 0.0;
    float by = dir.y > 0 ? grid_size.y : 0.0;
    // Add some offset to pad the grid bigger so the ray can go into the
    // neighbor grid, otherwise the ray will keep stepping the same grid due to
    // floating point precision issue.
    vec2 b = vec2(bx, by) + border_offset;
    return b;
}

// Aries uses reverse Z, near plane maps to 1 and far plane maps to 0 in screen
// space.
// Given a ray in grid's local coordinate, calculate the hit distance t.
// border is given by offset_grid_border
bool trace_ray_hit_grid(
    vec3 origin, vec3 dir, vec2 border, float grid_height, out float t) {
    // Hit the height plane
    float t0 = (grid_height - origin.z) / dir.z;
    // Ray already under the grid, no need to trace
    t0 = origin.z <= grid_height ? 0 : t0;

    // Hit border
    vec2 tb = (border - origin.xy) / dir.xy;
    // t1 >= 0.0 if the origin is inside the grid.
    float t1 = min(tb.x, tb.y);

    t = min(t0, t1);
    // t0 < 0 means no hit happens with height plane
    t = t0 < 0 ? t1 : t;

    return t == t0;
}

const float SSR_GRID_EPSILON = 0.01;

bool trace_ray_hiz(vec3 origin_ss,
                   vec3 dir_ss,
                   int start_mip_level,
                   out vec3 hit_ss) {
    int root_level = hiz_mip_count - 1;
    start_mip_level = min(start_mip_level, root_level);
    int level = start_mip_level;

    vec2 start_mip_res = textureSize(hiz_buffer, start_mip_level);

    vec3 origin_idx = vec3(origin_ss.xy * start_mip_res, origin_ss.z);
    vec3 dir_idx = vec3(dir_ss.xy * start_mip_res, dir_ss.z);

    vec2 border_offset = sign(dir_ss.xy) * SSR_GRID_EPSILON;
    vec2 grid_border = offset_grid_border(dir_ss, vec2(1.0), border_offset);

    vec3 hit_idx = origin_idx;
    // Step one grid to avoid self intersection
    {
        float t = 0;
        trace_ray_hit_grid(fract(hit_idx), dir_idx, grid_border, 0.0, t);
        hit_idx += t * dir_idx;
    }

    int iter = 0;
    // The max iter count only works as a safety guard from the kernel stalling
    // the GPU. Decrease it will results in missing ray tracing hits.
    const int MAX_ITER_COUNT = 400;

    // Only check if the ray hits near/far plane, rather than do a full check if
    // hit point is inside screen. As full check takes too much time according
    // to the profiler.
    while (iter < MAX_ITER_COUNT && level >= start_mip_level &&
           level <= root_level && value_in_01(hit_idx.z)) {
        // hit_idx and dir_idx always stands for index in current level
        vec2 grid_index = floor(hit_idx.xy);
        vec3 grid_offset_idx = vec3(grid_index, 0.0);
        vec2 max_mip_index = textureSize(hiz_buffer, level) - 1;

        float t = 0;
        bool has_hit = trace_ray_hit_grid(
            hit_idx - grid_offset_idx,
            dir_idx,
            grid_border,
            // We may read wrong value when grid_index < 0, but that does not
            // cause light leaking because hiz buffer only pad when grid_index
            // >= size
            texelFetch(hiz_buffer,
                       ivec2(min(grid_index.x, max_mip_index.x),
                             min(grid_index.y, max_mip_index.y)),
                       level)
                .r,
            t);

        hit_idx += t * dir_idx;

        level += has_hit ? -1 : 1;

        // Adjust index
        float idx_scale = has_hit ? 2.0 : 0.5;
        hit_idx.xy *= idx_scale;
        dir_idx.xy *= idx_scale;
        iter++;
    }

    // If hit happens, the hit_idx is in level -1, multiply it with 0.5 to get
    // the hit_idx in level 0
    hit_ss = vec3(0.5 * hit_idx.xy / start_mip_res, hit_idx.z);
    return level < start_mip_level;
}

// Very slow for long range ray, only used as a simple reference during
// development
bool trace_ray_dda(vec3 origin_ss,
                   vec3 dir_ss,
                   int mip_level,
                   out vec3 hit_ss) {
    vec2 mip_res = textureSize(hiz_buffer, mip_level);
    vec2 grid_size = 1.0 / mip_res;
    vec2 border_offset = sign(dir_ss.xy) * grid_size * 1e-3;
    vec2 grid_border = offset_grid_border(dir_ss, grid_size, border_offset);
    hit_ss = origin_ss;

    // step one grid to avoid self intersection
    {
        vec2 grid_index = floor(hit_ss.xy * mip_res);
        vec3 grid_offset_ss = vec3(grid_index * grid_size, 0.0);

        float t = 0;
        trace_ray_hit_grid(
            hit_ss - grid_offset_ss, dir_ss, grid_border, 0.0, t);
        hit_ss += t * dir_ss;
    }

    for (int i = 0; i < 300; i++) {
        vec2 grid_index = floor(hit_ss.xy * mip_res);
        vec3 grid_offset_ss = vec3(grid_index * grid_size, 0.0);
        vec2 grid_center_uv = index_to_uv(grid_index, grid_size);

        float t = 0;
        bool has_hit = trace_ray_hit_grid(
            hit_ss - grid_offset_ss,
            dir_ss,
            grid_border,
            textureLod(hiz_buffer, grid_center_uv, mip_level).r,
            t);
        hit_ss += t * dir_ss;

        if (has_hit) {
            return true;
        }
    }
    return false;
}

vec2 sample_noise(ivec2 index) {
    vec2 u = vec2(gloden_ratio_sequence(0.124, frame_index),
                  radical_inverse_2(frame_index));
    // Add per-pixel noise
    float noise = interleaved_gradient_noise(index) * 2.0 * PI;
    u = fract(vec2(cos(noise), sin(noise) * 2.173631) + u);
    return u;
}

float sample_reflect_dir(ivec2 index,
                         MetallicRoughnessPBR pbr,
                         vec3 v_vs,
                         vec3 n_vs,
                         out vec3 dir_vs) {
    // Sample dir
    float roughness =
        square(max(pbr.perceptual_roughness, SSR_MIN_SAMPLING_ROUGHNESS));
    vec2 u = sample_noise(index);

    // Biased sampling trick on P.68, Stochastic Screen-Space Reflections
    // (Tomasz Stachowiak)
    // Clamp pdf to avoid noisy samples on GGX tail
    u.x *= unbiased_sampling;

    vec3 t_vs, b_vs;
    construct_TBN_with_normal(n_vs, t_vs, b_vs);
    mat3 ts_to_vs = mat3(t_vs, n_vs, b_vs);

    vec3 v_ts = v_vs * ts_to_vs;
    vec3 l_ts;
    float pdf = sample_l_from_D(u, roughness, v_ts, l_ts);
    dir_vs = ts_to_vs * l_ts;

    return pdf;
}

vec4 trace_ray(ivec2 index, ivec2 size) {
    vec2 inv_resolution = 1.0 / size;
    vec2 noise = fract(sample_noise(index) * 2.163680312);
    vec2 uv = (index + noise) * inv_resolution;
    float depth01 = textureLod(hiz_buffer, uv, 0).r;

    if (depth01 == 0) {
        return vec4(0);
    }

    GBuffer gbuffer = decode_gbuffer(
        vec4(0), texture(gbuffer1_tex, uv), texture(gbuffer2_tex, uv), vec4(0));

    if (gbuffer.shading_model != SHADING_MODEL_METALLIC_ROUGHNESS_PBR) {
        return vec4(0.0);
    }

    MetallicRoughnessPBR brdf = get_metallic_roughness_pbr(gbuffer);
    ShadingPoint sp = get_shading_point(view, uv, depth01);

    vec3 reflect_dir_vs;
    float pdf = sample_reflect_dir(
        index, brdf, sp.v_vs, gbuffer.normal_vs, reflect_dir_vs);

    if (dot(gbuffer.normal_vs, reflect_dir_vs) <= 0) {
        return vec4(0.0);
    }

    vec3 pos_ss = vec3(uv, depth01);
    vec3 reflect_offset_pos_ss = transform_position_hclip_to_ss(
        view.P * vec4(sp.pos_vs + reflect_dir_vs, 1.0));
    vec3 reflect_dir_ss = reflect_offset_pos_ss - pos_ss;

    float normal_offset = 0.005;
    // Avoid self intersection
    vec3 offset_origin_ss = transform_position_hclip_to_ss(
        view.P * vec4(sp.pos_vs + gbuffer.normal_vs * normal_offset, 1.0));
    vec3 hit_ss;
    bool has_hit = trace_ray_hiz(offset_origin_ss, reflect_dir_ss, 0, hit_ss);
    // trace_ray_dda(pos_ss, reflect_dir_ss, 0, hit_ss);

    return vec4(hit_ss, has_hit ? pdf : 0.0);
}

void main() {
    ivec2 index = ivec2(gl_GlobalInvocationID.xy);
    ivec2 size = imageSize(hit_buffer).xy;
    if (index.x >= size.x || index.y >= size.y) {
        return;
    }

    imageStore(hit_buffer, index, trace_ray(index, size));
}