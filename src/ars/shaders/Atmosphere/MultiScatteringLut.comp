#version 450 core

#include "AtmosphereCommon.glsl"
#include <Volume.glsl>

layout(local_size_x = 32, local_size_y = 32) in;

layout(set = 0, binding = 0, rgba16f) uniform image2D multi_scattering_lut;

layout(set = 0, binding = 1) uniform sampler2D transmittance_lut;

layout(set = 1, binding = 0) uniform Param {
    Atmosphere atmosphere;
};

void ray_march_sample(float origin_r,
                      float origin_mu,
                      vec2 sun_dir,
                      out vec3 L_in,
                      out vec3 L_f) {
    float dist;
    bool hit_ground =
        ray_hit_sphere(atmosphere.bottom_radius, origin_r, origin_mu, dist);
    if (!hit_ground) {
        dist = distance_to_atmosphere_top(atmosphere, origin_r, origin_mu);
    }

    const int step_count = 20;
    float dt = dist / float(step_count);

    vec3 trans = vec3(1.0);
    L_in = vec3(0.0);
    L_f = vec3(0.0);

    vec2 ray_origin = vec2(0, origin_r);
    vec2 ray_dir = vec2(safe_sqrt(1.0 - square(origin_mu)), origin_mu);

    for (int i = 0; i < step_count; i++) {
        float t = (i + 0.5) * dt;
        vec2 ray_p = ray_origin + ray_dir * t;
        float r = length(ray_p);
        float mu = dot(normalize(ray_p), sun_dir);
        vec3 s = texture(transmittance_lut,
                         transmittance_lut_r_mu_to_uv(atmosphere, r, mu))
                     .rgb;
        vec3 e_s = atmosphere_extinction_scatter(atmosphere, r);
        vec3 e = atmosphere_extinction(atmosphere, r);
        float phase = isotropic_phase();

        L_in += trans * e_s * phase * s * dt;
        L_f += e_s * trans * dt;
        trans *= exp(-e * dt);
    }

    if (hit_ground) {
        vec2 ray_p = ray_origin + ray_dir * dist;
        float mu = dot(normalize(ray_p), sun_dir);
        vec3 s = texture(transmittance_lut,
                         transmittance_lut_r_mu_to_uv(
                             atmosphere,
                             // We know the ray is on the ground, use atmosphere
                             // bottom radius rather than length(ray_p) to avoid
                             // some potential floating point precision issue.
                             atmosphere.bottom_radius,
                             mu))
                     .rgb;
        float brdf = atmosphere.ground_albedo / PI;
        L_in += trans * brdf * mu * s;
    }
}

vec3 integrate_multi_scattering(float r, float sun_mu) {
    int sample_count = 16;
    vec2 sun_dir = vec2(safe_sqrt(1.0 - square(sun_mu)), sun_mu);
    float phase = isotropic_phase();
    float delta_phi = PI / sample_count;

    vec3 L_2nd = vec3(0.0);
    vec3 f_ms = vec3(0.0);
    for (int i = 0; i < sample_count; i++) {
        float phi = (i + 0.5) * delta_phi;
        // integration area
        float dw = 2.0 * PI * sin(phi) * delta_phi;

        vec3 L_in, L_f;
        ray_march_sample(r, cos(phi), sun_dir, L_in, L_f);

        L_2nd += L_in * phase * dw;
        f_ms += L_f * phase * dw;
    }

    return max(L_2nd / (1.0 - f_ms), vec3(0.0));
}

void main() {
    ivec2 index = ivec2(gl_GlobalInvocationID.xy);
    ivec2 size = imageSize(multi_scattering_lut);
    if (index.x >= size.x || index.y >= size.y) {
        return;
    }

    vec2 uv = index_to_uv(index, 1.0 / size);
    vec2 rmu = multi_scattering_lut_uv_to_r_mu(atmosphere, uv);
    vec3 multi_scatter = integrate_multi_scattering(rmu.x, rmu.y);
    imageStore(multi_scattering_lut, index, vec4(multi_scatter, 1.0));
}