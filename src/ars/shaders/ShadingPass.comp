#version 450 core

#include <GBuffer.glsl>
#include <Light.glsl>
#include <Misc.glsl>

layout(local_size_x = 32, local_size_y = 32) in;

layout(push_constant) uniform PushConstant {
    int width;
    int height;
};

layout(set = 0, binding = 0) uniform sampler2D gbuffer0_tex;
layout(set = 0, binding = 1) uniform sampler2D gbuffer1_tex;
layout(set = 0, binding = 2) uniform sampler2D gbuffer2_tex;
layout(set = 0, binding = 3) uniform sampler2D gbuffer3_tex;

layout(set = 0,
       binding = 4,
       r11f_g11f_b10f) writeonly uniform image2D output_image;

void main() {
    ivec2 index = ivec2(gl_GlobalInvocationID.xy);
    if (index.x >= width || index.y >= height) {
        return;
    }

    vec2 inv_resolution = vec2(1.0 / width, 1.0 / height);
    vec2 uv = index_to_uv(vec2(index), inv_resolution);

    GBuffer gbuffer = decode_gbuffer(texture(gbuffer0_tex, uv),
                                     texture(gbuffer1_tex, uv),
                                     texture(gbuffer2_tex, uv),
                                     texture(gbuffer3_tex, uv));

    vec3 result = vec3(gbuffer.normal_vs);

    imageStore(output_image, index, vec4(result, 1.0));
}