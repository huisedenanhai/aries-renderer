#version 450 core

#include <Misc.glsl>
#include <Transform.glsl>

#ifdef BACKGROUND_PHYSICAL_SKY
#include "../Atmosphere/AtmosphereCommon.glsl"
#endif

layout(local_size_x = 8, local_size_y = 8) in;

layout(set = 0,
       binding = 0,
       r11f_g11f_b10f) writeonly uniform image2D output_image;

layout(set = 0, binding = 1) uniform sampler2D depth_stencil_tex;
layout(set = 0, binding = 2) uniform sampler2D background_tex;

layout(set = 1, binding = 0) uniform Param {
    vec3 background_factor;
};

layout(set = 1, binding = 1) uniform View {
    ViewTransform view;
};

vec3 shade_background(vec3 v_ws) {
#ifdef BACKGROUND_PHYSICAL_SKY
    vec2 uv = sky_view_lut_direction_to_uv(-v_ws);
#else
    vec2 uv = panorama_direction_to_uv(-v_ws);
#endif
    return background_factor * texture(background_tex, uv).rgb;
}

void main() {
    ivec2 index = ivec2(gl_GlobalInvocationID.xy);
    ivec2 size = imageSize(output_image).xy;
    if (index.x >= size.x || index.y >= size.y) {
        return;
    }

    vec2 uv = index_to_uv(index, 1.0 / size);
    float depth01 = texture(depth_stencil_tex, uv).r;
    // Only work with background
    if (depth01 != 0.0) {
        return;
    }

    ShadingPoint sp = get_shading_point(view, uv, depth01);

    vec3 background = shade_background(sp.v_ws);

    imageStore(output_image, index, vec4(background, 1));
}