#version 450 core

#include <MetallicRoughnessPBR.glsl>
#include <Misc.glsl>
#include <Sampling.glsl>

layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

layout(set = 0, binding = 0) uniform samplerCube radiance_cube_map;

layout(set = 1, binding = 0) uniform Param {
    int size;
    float perceptual_roughness;
    int mip_level;
    int radiance_base_resolution;
    float bias;
    int sample_count;
};

layout(set = 1,
       binding = 1,
       r11f_g11f_b10f) writeonly uniform imageCube cube_map;

void main() {
    ivec3 index = ivec3(gl_GlobalInvocationID.xyz);
    if (index.x >= size || index.y >= size) {
        return;
    }
    vec3 n = cube_map_index_to_direction(index, size);
    vec3 t, b;
    construct_TBN_with_normal(n, t, b);

    vec3 acc = vec3(0.0);
    float weight = 0.0;

    float roughness = square(perceptual_roughness);

    uint seed = tea(4, index.x, index.y + index.z);
    // Add a random offset to gloden ratio sequence to make noise less
    // distracting
    float offset = rnd(seed);

    for (int i = 0; i < sample_count; i++) {
        vec2 u = vec2(float(i) / float(sample_count),
                      gloden_ratio_sequence(offset, i));
        vec3 r;
        float pdf = sample_l_from_D(u, roughness, vec3(0, 1, 0), r);
        if (r.y > 0) {
            vec3 dir = r.y * n + r.x * t + r.z * b;

            // Access mipmap based on sample density
            // similar to
            // https://chetanjags.wordpress.com/2015/08/26/image-based-lighting/
            // and
            // https://developer.nvidia.com/gpugems/gpugems3/part-iii-rendering/chapter-20-gpu-based-importance-sampling

            // TODO make bias adjustable
            float env_mip_level =
                roughness == 0.0
                    ? 0.0
                    : 0.5 * log2(6.0 * square(radiance_base_resolution) /
                                 (4.0 * PI * sample_count * pdf)) +
                          bias;
            env_mip_level = max(env_mip_level, 0.0);

            acc += textureLod(radiance_cube_map, dir, env_mip_level).rgb * r.y;
            weight += r.y;
        }
    }

    imageStore(cube_map, index, vec4(max(acc / weight, vec3(0.0)), 1.0));
}