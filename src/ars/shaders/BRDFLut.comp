#version 450 core

#include <MetallicRoughnessPBR.glsl>
#include <Misc.glsl>
#include <Sampling.glsl>

layout(local_size_x = 32, local_size_y = 32) in;

layout(set = 0, binding = 0, rgba16f) writeonly uniform image2D output_image;

layout(set = 1, binding = 0) uniform Param {
    int width;
    int height;
};

void main() {
    ivec2 index = ivec2(gl_GlobalInvocationID.xy);
    if (index.x >= width || index.y >= height) {
        return;
    }

    vec2 uv = index_to_uv(index, vec2(1.0 / width, 1.0 / height));

    float roughness = uv.x;
    float NoV = uv.y;

    vec3 n = vec3(0.0, 1.0, 0.0);
    vec3 v = vec3(sqrt(max(0.0, 1.0 - NoV * NoV)), NoV, 0.0);

    int sample_count = 1024;

    vec2 env_brdf = vec2(0.0);
    for (int i = 0; i < sample_count; i++) {
        vec2 u = hammersly(i, sample_count);
        vec3 h = sample_h_from_D(roughness, u);
        env_brdf += specular_env_BRDF_factor(roughness, n, v, h);
    }

    env_brdf /= float(sample_count);
    // The integeration computes the output radiance with uniform environment
    // light with radiance of 1.
    // But when the term used for actual shading, we want to multiply it with
    // irradiance. the irradiance of uniform radiance is PI. scale the env brdf
    // to make the magnitude correct.
    env_brdf /= PI;

    imageStore(output_image, index, vec4(env_brdf, 0.0, 1.0));
}