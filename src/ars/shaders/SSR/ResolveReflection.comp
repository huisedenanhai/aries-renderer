#version 450 core

#include "SSRCommon.glsl"
#include <GBuffer.glsl>
#include <MetallicRoughnessPBR.glsl>
#include <Misc.glsl>
#include <ShadingModel.glsl>
#include <Transform.glsl>

layout(local_size_x = 32, local_size_y = 32) in;

layout(set = 0,
       binding = 0,
       r11f_g11f_b10f) writeonly uniform image2D reflect_color_image;

layout(set = 0, binding = 1) uniform sampler2D gbuffer0_tex;
layout(set = 0, binding = 2) uniform sampler2D gbuffer1_tex;
layout(set = 0, binding = 3) uniform sampler2D gbuffer2_tex;
layout(set = 0, binding = 4) uniform sampler2D depth_stencil_tex;
layout(set = 0, binding = 5) uniform sampler2D brdf_lut;
layout(set = 0, binding = 6) uniform samplerCube cube_map;

#ifdef ENABLE_SSR
layout(set = 0, binding = 7) uniform sampler2D hit_buffer;
layout(set = 0, binding = 8) uniform sampler2D shaded_radiance_history_tex;
#endif

layout(set = 1, binding = 0) uniform Param {
    int width;
    int height;
    int frame_index;

    mat4 P;
    mat4 I_P;
    mat4 I_V;
    mat4 reproject_IV_VP;

    vec3 env_randiance_factor;
    int cube_map_mip_count;
};

vec3 get_filtered_env_irradiance(vec3 v_ws, float lod) {
    return env_randiance_factor * textureLod(cube_map, v_ws, lod).rgb * PI;
}

#define RESOLVE_SAMPLE_COUNT 4
#define RESOLVE_FRAME_JITTER_COUNT 7

// Offset from Stochastic Screen-Space Reflections (Tomasz Stachowiak)
const vec2 RESOLVE_HIT_OFFSET[RESOLVE_FRAME_JITTER_COUNT]
                             [RESOLVE_SAMPLE_COUNT] = {
                                 {
                                     vec2(-3, -3),
                                     vec2(-3, 0),
                                     vec2(0, -3),
                                     vec2(0, 0),
                                 },
                                 {
                                     vec2(1, 0),
                                     vec2(1, 3),
                                     vec2(2, 0),
                                     vec2(2, 3),
                                 },
                                 {
                                     vec2(-3, -1),
                                     vec2(0, -1),
                                     vec2(-3, 2),
                                     vec2(0, 2),
                                 },
                                 {
                                     vec2(-3, -2),
                                     vec2(-3, -1),
                                     vec2(0, -2),
                                     vec2(0, -1),
                                 },
                                 {
                                     vec2(-1, 0),
                                     vec2(0, 0),
                                     vec2(-1, 3),
                                     vec2(0, 3),
                                 },
                                 {
                                     vec2(1, -2),
                                     vec2(2, -2),
                                     vec2(1, 1),
                                     vec2(2, 1),
                                 },
                                 {
                                     vec2(-2, 0),
                                     vec2(-2, 3),
                                     vec2(1, 0),
                                     vec2(1, 3),
                                 },
};

vec3 reproject_pos_ss(vec3 pos_vs) {
    vec4 pos_hclip = reproject_IV_VP * vec4(pos_vs, 1.0);
    vec3 pos_ss = pos_hclip.rgb / pos_hclip.w;
    pos_ss.xy = 0.5 + 0.5 * pos_ss.xy;
    return pos_ss;
}

#ifdef ENABLE_SSR
float footprint_vs_to_ss(float fp_vs, float z_vs) {
    float w = P[2][3] * z_vs + P[3][3];
    float fp_ss = 0.5 * max(P[0][0], P[1][1]) * fp_vs / w;
    return fp_ss;
}

void resolve_ssr_single_sample(vec2 hit_buffer_uv,
                               MetallicRoughnessPBR brdf,
                               ShadingPoint sp,
                               float cone_tan,
                               vec3 n_vs,
                               inout vec3 irradiance_acc,
                               inout vec3 irradiance_weight_acc,
                               inout float fade_acc,
                               inout float fade_weight_acc) {
    vec4 ssr_hit = texture(hit_buffer, hit_buffer_uv);
    vec3 hit_ss = ssr_hit.xyz;
    float hit_pdf = ssr_hit.a;

    fade_weight_acc += 1;

    // No hit
    if (hit_pdf == 0) {
        return;
    }

    vec3 hit_vs = reconstruct_position_from_ss(I_P, hit_ss.xy, hit_ss.z);

    float hit_surface_depth01 = texture(depth_stencil_tex, hit_ss.xy).r;
    vec3 hit_surface_vs =
        reconstruct_position_from_ss(I_P, hit_ss.xy, hit_surface_depth01);
    // Infer geometry normal on object edge gives incorrect result, which is not
    // usable for SSR, use shading normal instead
    vec3 hit_normal_vs = decode_normal(texture(gbuffer1_tex, hit_ss.xy));

    vec3 ray_dir_vs = normalize(hit_vs - sp.pos_vs);

    float back_face_fade = smoothstep(0, -0.1, dot(ray_dir_vs, hit_normal_vs));

    float screen_border_fade_size = 0.1;
    float border_fade = fade_on_edge_01(hit_ss.x, screen_border_fade_size) *
                        fade_on_edge_01(hit_ss.y, screen_border_fade_size);

    float thickness_fade = smoothstep(0.1, 0, distance(hit_vs, hit_surface_vs));

    // Adjust brdf
    brdf.base_color = vec3(1.0);
    brdf.perceptual_roughness =
        max(brdf.perceptual_roughness, SSR_MIN_SAMPLING_ROUGHNESS);
    float fr = specular_BRDF(brdf, n_vs, sp.v_vs, ray_dir_vs).r;
    float NoL = max(0, dot(n_vs, ray_dir_vs));

    float clone_bias = 1.0;
    float cone_footprint_vs = distance(hit_vs, sp.pos_vs) * cone_tan;
    float cone_footprint_ss =
        footprint_vs_to_ss(cone_footprint_vs, sp.pos_vs.z) * clone_bias;
    float history_lod =
        log2(cone_footprint_ss *
             max_comp_value(textureSize(shaded_radiance_history_tex, 0).xy));

    // Reproject hit point uv
    vec2 last_frame_hit_uv = reproject_pos_ss(hit_surface_vs).xy;
    vec3 reflect_radiance =
        textureLod(shaded_radiance_history_tex, last_frame_hit_uv, history_lod)
            .rgb;

    float w = fr * NoL / hit_pdf;

    fade_acc += thickness_fade * back_face_fade * border_fade;
    irradiance_acc += w * reflect_radiance;
    irradiance_weight_acc += w;
}

vec3 resolve_ssr_irradiance(ivec2 index,
                            MetallicRoughnessPBR brdf,
                            ShadingPoint sp,
                            vec3 n_vs,
                            out float fade) {
    vec3 irradiance_acc = vec3(0);
    vec3 irradiance_weight_acc = vec3(0);
    float fade_acc = 0.0;
    float fade_weight_acc = 0.0;

    float cone_cos = cone_cosine_fitted(square(brdf.perceptual_roughness));
    float cone_tan = sqrt(max(0.0, square(1.0 / cone_cos) - 1.0));
    // Elongation fit from P.85, Stochastic Screen-Space Reflections (Tomasz
    // Stachowiak)
    cone_tan *=
        mix(clamp01(2.0 * dot(n_vs, sp.v_vs)), 1.0, brdf.perceptual_roughness);

    // Build checker board pattern to remove half resolution artifact
    ivec2 mod_index = index % RESOLVE_FRAME_JITTER_COUNT;
    int hit_jitter_index =
        (frame_index + mod_index.x + mod_index.y) % RESOLVE_FRAME_JITTER_COUNT;
    for (int i = 0; i < RESOLVE_SAMPLE_COUNT; i++) {
        vec2 jitter = RESOLVE_HIT_OFFSET[hit_jitter_index][i];
        vec2 hit_uv = sp.screen_uv + jitter / textureSize(hit_buffer, 0).xy;
        resolve_ssr_single_sample(hit_uv,
                                  brdf,
                                  sp,
                                  cone_tan,
                                  n_vs,
                                  irradiance_acc,
                                  irradiance_weight_acc,
                                  fade_acc,
                                  fade_weight_acc);
    }

    fade = max(0.0, fade_acc / fade_weight_acc);
    return max(irradiance_acc / irradiance_weight_acc, 0.0);
}
#endif

vec3 calculate_reflection(ivec2 index) {
    vec2 uv = index_to_uv(index, vec2(1.0 / width, 1.0 / height));

    GBuffer gbuffer = decode_gbuffer(texture(gbuffer0_tex, uv),
                                     texture(gbuffer1_tex, uv),
                                     texture(gbuffer2_tex, uv),
                                     vec4(0));

    if (gbuffer.shading_model != SHADING_MODEL_METALLIC_ROUGHNESS_PBR) {
        return vec3(0.0);
    }

    MetallicRoughnessPBR brdf = get_metallic_roughness_pbr(gbuffer);

    float depth01 = texture(depth_stencil_tex, uv).r;
    ShadingPoint sp = get_shading_point(uv, depth01, I_P, I_V);

    vec3 n_vs = gbuffer.normal_vs;

    float NoV = clamp01(dot(n_vs, sp.v_vs));
    vec3 fe = environment_BRDF(brdf, brdf_lut, NoV);

    // Sample env irradiance
    vec3 n_ws = transform_vector(I_V, n_vs);
    vec3 reflect_dir_ws = reflect(-sp.v_ws, n_ws);
    vec3 specular_env_irradiance =
        brdf.occlusion *
        get_filtered_env_irradiance(reflect_dir_ws,
                                    (cube_map_mip_count - 1) *
                                        brdf.perceptual_roughness);
    vec3 prefiltered_glossy_indirect_radiance = fe * specular_env_irradiance;

#ifdef ENABLE_SSR
    float ssr_fade = 0.0;
    vec3 ssr_irradiance =
        resolve_ssr_irradiance(index, brdf, sp, n_vs, ssr_fade);
    vec3 ssr_reflect_radiance = fe * PI * ssr_irradiance;

    vec3 reflect_radiance = mix(
        prefiltered_glossy_indirect_radiance, ssr_reflect_radiance, ssr_fade);

    return reflect_radiance;
#else
    return prefiltered_glossy_indirect_radiance;
#endif
}

void main() {
    ivec2 index = ivec2(gl_GlobalInvocationID.xy);
    if (index.x >= width || index.y >= height) {
        return;
    }

    vec3 reflect_radiance = calculate_reflection(index);
    imageStore(reflect_color_image, index, vec4(reflect_radiance, 1));
}